/**
 * Project Euler: Problem 045
 * Triangular, Pentagonal, and Hexagonal
 * Solution written by Kyle Swecker
 * 
 * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
 * 
 * Triangle:   Tn = n(n + 1)/2 = 1, 3, 6, 10, 15, ...
 * Pentagonal: Pn = n(3n - 1)/2 = 1, 5, 12, 22, 35, ...
 * Hexagonal:  Hn = n(2n - 1) = 1, 6, 15, 28, 45, ...
 * 
 * It can be verified that T285 = P165 = H143 = 40755.
 * 
 * Find the next triangle number that is also pentagonal and hexagonal.
 */

#include <iostream>
#include <cmath>
#include <cstdint>

static auto isPentagonal(std::uint64_t num) -> bool {
  const auto check     { std::uint64_t{24 * num + 1} };
  const auto sqrtCheck { static_cast<std::uint64_t>(std::sqrt(static_cast<double>(check))) };

  return ((sqrtCheck * sqrtCheck == check) && !((sqrtCheck + 1) % 6));
}

static auto triangular(std::uint64_t n) -> std::uint64_t {
  return (n * (n + 1) / 2);
}

static auto pentagonal(std::uint64_t n) -> std::uint64_t {
  return (n * (3 * n - 1) / 2);
}

static auto hexagonal(std::uint64_t n) -> std::uint64_t {
  return (n * (2 * n - 1));
}

auto main() -> int {
  auto       hexIdx     { std::uint64_t{143} };
  auto       triIdx     { std::uint64_t{0} };
  auto       pentIdx    { std::uint64_t{0} };
  auto       hexVal     { std::uint64_t{0} };
  auto       found      { false };

  while (!found) {
    hexIdx++;
    hexVal = hexagonal(hexIdx);

    if (isPentagonal(hexVal)) {
      triIdx = 2 * hexIdx - 1;

      auto check     { std::uint64_t{24 * hexVal + 1} };
      auto sqrtCheck { static_cast<std::uint64_t>(std::sqrt(static_cast<double>(check))) };

      pentIdx = (sqrtCheck + 1) / 6;

      if (triangular(triIdx) == hexVal && pentagonal(pentIdx) == hexVal)
        found = true;
    }
  }

  std::cout << "Answer: " << hexVal << std::endl;

  return 0;
}
