/**
 * Project Euler: Problem 012
 * Highly Divisible Triangular Number
 * Solution written by Kyle Swecker
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 */

#include <iostream>
#include <cstdint>

static inline auto calculateTriangleNumber(const std::size_t n) -> std::uint64_t {
  return n * (n + 1) / 2;
}

static auto countDivisors(const std::uint64_t n) -> std::size_t {
  auto count { std::size_t{} };
  auto sqrtN { static_cast<std::uint64_t>(std::sqrt(n)) };

  for (auto i { std::uint64_t{1} }; i <= sqrtN; i++)
    if (!(n % i))
      count += 2;

  if (sqrtN * sqrtN == n)
    count--;

  return count;
}

static auto findFirstTriangleNumberWithDivisors(const int n) -> std::uint64_t {
  auto number { std::size_t{1} };

  for (auto i { std::size_t{2} }; countDivisors(calculateTriangleNumber(number)) <= n; i++)
    number = i;

  return calculateTriangleNumber(number);
}

auto main() -> int {
  constexpr auto divisors       { 500 };
  const auto     triangleNumber { findFirstTriangleNumberWithDivisors(divisors) };

  std::cout << "Answer: " << triangleNumber << std::endl;

  return 0;
}
