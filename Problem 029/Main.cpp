/**
 * Project Euler: Problem 029
 * Distinct Powers
 * Solution written by Kyle Swecker
 * 
 * Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:
 * 
 * 2^2=4,  2^3=8,   2^4=16,  2^5=32
 * 3^2=9,  3^3=27,  3^4=81,  3^5=243
 * 4^2=16, 4^3=64,  4^4=256, 4^5=1024
 * 5^2=25, 5^3=125, 5^4=625, 5^5=3125
 * 
 * If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
 * 
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 * 
 * How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100?
 */

#include <iostream>
#include <set>
#include <cmath>

static auto countDistinctPowers(const int minBase, const int maxBase, const int minExponent, const int maxExponent) -> std::size_t {
  auto terms { std::set<double>{} };

  for (auto a { minBase }; a <= maxBase; a++)
    for (auto b { minExponent }; b <= maxExponent; b++)
      terms.insert(std::pow(a, b));

  return terms.size();
}

auto main() -> int {
  constexpr auto minBase     { 2 };
  constexpr auto maxBase     { 100 };
  constexpr auto minExponent { 2 };
  constexpr auto maxExponent { 100 };
  const auto     result      { countDistinctPowers(minBase, maxBase, minExponent, maxExponent) };

  std::cout << "Answer: " << result << std::endl;

  return 0;
}
